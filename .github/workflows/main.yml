name: Build Project

on:
  push:
    branches:
    - develop
    - master
    paths:
    - 'Tools/**'
    - 'UnityProject/**'
  pull_request:
    branches:
    - develop
    - master
    paths:
    - 'Tools/**'
    - 'UnityProject/**'

jobs:
  performTests:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - UnityProject
        unityVersion:
          - 2019.2.19f1
        targetPlatform:
          - StandaloneWindows64
    steps:
      # Checkout repository (required to test local actions)
      - name: Checkout repository
        uses: actions/checkout@v2.0.0

      # Cache the library directory to speed up builds
      - name: Cache library directory
        uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
            Library-${{ matrix.projectPath }}-
            Library-

      # Set the UNITY_LICENSE environment variable
      - name: Setup license
        # This step:
        #   - Grabs the license file contents from the $LICENSE_FILE_PATH
        #   - Uses substitution to escape newline characters for GitHub Actions set-env.
        #     (from: https://github.community/t5/GitHub-Actions/set-output-Truncates-Multiline-Strings/td-p/37870)
        #   - Set the UNITY_LICENSE env var for all future steps using special GitHub Actions syntax
        env:
          LICENSE_FILE_PATH: ./Tools/UnityLicense.ulf
        run: |
          license=$(<"$LICENSE_FILE_PATH")
          license="${license//'%'/'%25'}"
          license="${license//$'\n'/'%0A'}"
          license="${license//$'\r'/'%0D'}"
          echo "::set-env name=UNITY_LICENSE::$license"
      # Test
      - name: Run tests
        uses: webbertakken/unity-test-runner@v1.3
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
      - uses: actions/upload-artifact@v1
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
  performBuild:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - UnityProject
        unityVersion:
          - 2019.2.19f1
        targetPlatform:
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
    steps:
      # Checkout repository (required to test local actions)
      - name: Checkout repository
        uses: actions/checkout@v2.0.0

      # Cache the library directory to speed up builds
      - name: Cache library directory
        uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
            Library-${{ matrix.projectPath }}-
            Library-

      # Set the UNITY_LICENSE environment variable
      - name: Setup license
        # This step:
        #   - Grabs the license file contents from the $LICENSE_FILE_PATH
        #   - Uses substitution to escape newline characters for GitHub Actions set-env.
        #     (from: https://github.community/t5/GitHub-Actions/set-output-Truncates-Multiline-Strings/td-p/37870)
        #   - Set the UNITY_LICENSE env var for all future steps using special GitHub Actions syntax
        env:
          LICENSE_FILE_PATH: ./Tools/UnityLicense.ulf
        run: |
          license=$(<"$LICENSE_FILE_PATH")
          license="${license//'%'/'%25'}"
          license="${license//$'\n'/'%0A'}"
          license="${license//$'\r'/'%0D'}"
          echo "::set-env name=UNITY_LICENSE::$license"
      # Test
      - name: Run tests
        uses: webbertakken/unity-test-runner@v1.3
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}

      
      # Build the project
      - name: Build project
        uses: webbertakken/unity-builder@v0.9
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: UnityStation
          buildMethod: BuildScript.BuildProject

      # Upload distributables
      - name: Upload Build
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.targetPlatform }} Build
          path: build
